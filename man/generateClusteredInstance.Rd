% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/generateClusteredInstance.R
\name{generateClusteredInstance}
\alias{generateClusteredInstance}
\title{Function for generation of clustered instances.}
\usage{
generateClusteredInstance(n.cluster, n.points, n.dim = 2L,
  generator = lhs::maximinLHS, lower = 0, upper = 1, sigmas = NULL,
  n.depots = NULL, min.dist.to.bounds = 0,
  distribution.strategy = "equally.distributed", cluster.centers = NULL,
  out.of.bounds.handling = "reset", ...)
}
\arguments{
\item{n.cluster}{[\code{integer(1)}]\cr
Desired number of clusters.}

\item{n.points}{[\code{integer(1)}]\cr
Number of points for the instance.}

\item{n.dim}{[\code{integer(1)}]\cr
Number of dimensions. Most often you want to generate 2-dimensional instances
in the euclidean plane. Thus 2 is the default setting.}

\item{generator}{[\code{function}]\cr
Function which generates cluster centers. Default is \code{\link[lhs]{maximinLHS}}.}

\item{lower}{[\code{numeric(1)}]\cr
Lower bound for cube.}

\item{upper}{[\code{numeric(1)}]\cr
Upper bound for cube.}

\item{sigmas}{[\code{list} | \code{NULL}]\cr
Unnamed list of length \code{n.cluster} containing a covariance matrix
for each cluster. Default is \code{NULL}. In this case the covariance
matrix is a diagonal matrix containing the distance to the nearest
cluster center as diogonal elements.}

\item{n.depots}{[\code{integer(1)}]\cr
Number of depots in instances for the Vehicle Routing Problem (VRP).
Default is NULL, i. e., no depots. The proceeding is as follows:
If \code{n.depots} is 1, a random cluster center is defined to be the depot.
If \code{n.depots} is 2, the second depot has maximal distance to the first.
By convention the depots are placed as the first nodes in the coordinates
matrix.}

\item{min.dist.to.bounds}{[\code{numeric(1)}]\cr
Minimal distance ratio of cluster centers to the bounding box. Default is 0,
which means, that cluster centers can be located very close or even on the
bounding box.}

\item{distribution.strategy}{[\code{character(1)}]\cr
Define the strategy to distribute n.points on the n.cluster clusters. Default
is 'equally.distributed', which is the only option at the moment.}

\item{cluster.centers}{[\code{matrix}]\cr
Data frame of cluster centres of dimension \code{n.cluster} x \code{n.dim}. If
this is set, cluster centres are not generated automatically.
Default is \code{NULL}.}

\item{out.of.bounds.handling}{[\code{character(1)}]\cr
Clusters are generated on base of a multivariate gaussian distribution with
the cluster center as the mean vector. Possibly some of the points might fall
out of bounds, i. e., get coordinates larger than upper or lower than lower.
There are two strategies to force them to stick to the bounds:
\describe{
  \item{\dQuote{reset}}{Set the violating coordinates to the bounds.}
  \item{\dQuote{mirror}}{Mirror the coordinates at the violated axis.}
}
Default is \dQuote{reset}.}

\item{...}{[\code{any}]\cr
Currently not used.}
}
\value{
[\code{ClusteredNetwork}]
  Object of type \code{ClusteredNetwork}.
}
\description{
This function generates clustered instances. It first generates n cluster
centeres via a latin hypercube design to ensure space-filling property.
It then then distributes points to the clusters according to
gaussian distributions using the cluster centers as the mean vector and
the distance to the nearest neighbor cluster as the variance.
}
\examples{
x = generateClusteredInstance(n.points = 20L, n.cluster = 2L)
  y = generateClusteredInstance(n.points = 40L, n.cluster = 3L, n.depots = 2L)
}
\seealso{
\code{\link{generateRandomInstance}}
}

