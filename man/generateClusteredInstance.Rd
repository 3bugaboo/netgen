% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/generateClusteredInstance.R
\name{generateClusteredInstance}
\alias{generateClusteredInstance}
\title{Function for generation of clustered instances.}
\usage{
generateClusteredInstance(n.cluster, n.points, n.dim = 2L,
  generator = lhs::maximinLHS, lower = 0, upper = 1, sigmas = NULL,
  min.dist.to.bounds = (upper - lower)/20,
  distribution.strategy = "equally.distributed", cluster.centers = NULL,
  ...)
}
\arguments{
\item{n.cluster}{[\code{integer(1)}]\cr
Desired number of clusters.}

\item{n.points}{[\code{integer(1)}]\cr
Number of points for the instance.}

\item{n.dim}{[\code{integer(1)}]\cr
Number of dimensions. Most often you want to generate 2-dimensional instances
in the euclidean plane. Thus 2 is the default setting.}

\item{generator}{[\code{function}]\cr
Function which generates cluster centers. Default is \code{\link[lhs]{maximinLHS}}.}

\item{lower}{[\code{numeric(1)}]\cr
Lower bound for cube.}

\item{upper}{[\code{numeric(1)}]\cr
Upper bound for cube.}

\item{sigmas}{[\code{list} | \code{NULL}]\cr
Unnamed list of length \code{n.cluster} containing a covariance matrix
for each cluster. Default is \code{NULL}. In this case the covariance
matrix is a diagonal matrix containing the distance to the nearest
cluster center as diogonal elements.}

\item{min.dist.to.bounds}{[\code{numeric(1)}]\cr
Minimal distance of cluster centers to the bounding box. Default is
(\code{upper} - \code{lower}) / 20.}

\item{distribution.strategy}{[\code{character(1)}]\cr
Define the strategy to distribute n.points on the n.cluster clusters. Default
is 'equally.distributed'. Also available is 'random.partition'.}

\item{cluster.centers}{[\code{matrix}]\cr
Data frame of cluster centres of dimension \code{n.cluster} x \code{n.dim}. If
this is set, cluster centres are not generated automatically.
Default is \code{NULL}.}

\item{...}{[\code{any}]\cr
Not used yet.}
}
\value{
[\code{ClusterInstance}]
  Object of type \code{ClusterInstance}.
}
\description{
Testing algorithms for the Vehicle-Routing-Problem and understanding their
behaviour requires investigation of differnet instances. This function
generate clustered instances. It first generates n cluster centeres via a
LHS method and then distributes points to the clusters according to
gaussian distributions.
}

